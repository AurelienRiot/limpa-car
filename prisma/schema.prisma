generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}
 
model Account {
  id                 String @unique  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @unique @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @unique @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Billboard {
  id          String @id @default(uuid())
  label       String
  description String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Category {
  id          String @id @default(uuid())
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAd   DateTime @updatedAt

  @@index([billboardId])
}

model Product {
  id           String @id @default(uuid())
  categoryId   String
  category     Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  description  String @db.VarChar(1000)
  productSpecs String @db.VarChar(1000)
  priceHT       Decimal    //
  priceTTC      Decimal     //
  isFeatured   Boolean @default(false)
  isArchived   Boolean @default(false)
  images       Image[]
  // orderItems   OrderItem[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([categoryId])
}

model Image {
  id        String @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}